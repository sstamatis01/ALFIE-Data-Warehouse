version: '3.8'

services:
  # MongoDB for metadata storage
  mongodb:
    image: mongo:7.0
    container_name: data-warehouse-mongodb
    restart: unless-stopped
    ports:
      - "27017:27017"
    environment:
      MONGO_INITDB_ROOT_USERNAME: admin
      MONGO_INITDB_ROOT_PASSWORD: password
      MONGO_INITDB_DATABASE: data_warehouse
    volumes:
      - mongodb_data:/data/db
      - ./init-mongo.js:/docker-entrypoint-initdb.d/init-mongo.js:ro
    networks:
      - data-warehouse-network

  # MinIO for file storage
  minio:
    image: minio/minio:latest
    container_name: data-warehouse-minio
    restart: unless-stopped
    ports:
      - "9000:9000"
      - "9001:9001"
    environment:
      MINIO_ROOT_USER: minioadmin
      MINIO_ROOT_PASSWORD: minioadmin
    command: server /data --console-address ":9001"
    volumes:
      - minio_data:/data
    networks:
      - data-warehouse-network

  # Zookeeper for Kafka
  zookeeper:
    image: confluentinc/cp-zookeeper:7.4.4
    container_name: data-warehouse-zookeeper
    restart: unless-stopped
    environment:
      ZOOKEEPER_CLIENT_PORT: 2181
      ZOOKEEPER_TICK_TIME: 2000
    networks:
      - data-warehouse-network

  # Kafka broker
  kafka:
    image: confluentinc/cp-kafka:7.4.4
    container_name: data-warehouse-kafka
    restart: unless-stopped
    ports:
      - "9092:9092"
    environment:
      KAFKA_BROKER_ID: 1
      KAFKA_ZOOKEEPER_CONNECT: zookeeper:2181
      KAFKA_LISTENER_SECURITY_PROTOCOL_MAP: PLAINTEXT:PLAINTEXT,PLAINTEXT_HOST:PLAINTEXT
      KAFKA_ADVERTISED_LISTENERS: PLAINTEXT://kafka:29092,PLAINTEXT_HOST://localhost:9092
      KAFKA_OFFSETS_TOPIC_REPLICATION_FACTOR: 1
      KAFKA_TRANSACTION_STATE_LOG_MIN_ISR: 1
      KAFKA_TRANSACTION_STATE_LOG_REPLICATION_FACTOR: 1
      KAFKA_AUTO_CREATE_TOPICS_ENABLE: "true"
      KAFKA_NUM_PARTITIONS: 3
      KAFKA_DEFAULT_REPLICATION_FACTOR: 1
    depends_on:
      - zookeeper
    networks:
      - data-warehouse-network

  # Kafka UI (optional)
  kafka-ui:
    image: provectuslabs/kafka-ui:latest
    container_name: data-warehouse-kafka-ui
    restart: unless-stopped
    ports:
      - "8080:8080"
    environment:
      KAFKA_CLUSTERS_0_NAME: local
      KAFKA_CLUSTERS_0_BOOTSTRAPSERVERS: kafka:29092
      KAFKA_CLUSTERS_0_ZOOKEEPER: zookeeper:2181
    depends_on:
      - kafka
    networks:
      - data-warehouse-network

  # Data Warehouse API (optional - for containerized deployment)
  api:
    build: .
    container_name: data-warehouse-api
    restart: unless-stopped
    ports:
      - "8000:8000"
    environment:
      MONGODB_URL: mongodb://admin:password@mongodb:27017/data_warehouse?authSource=admin
      MINIO_ENDPOINT: minio:9000
      MINIO_ACCESS_KEY: minioadmin
      MINIO_SECRET_KEY: minioadmin
      MINIO_SECURE: "false"
      MINIO_BUCKET_NAME: data-warehouse
      KAFKA_BOOTSTRAP_SERVERS: kafka:29092
      KAFKA_DATASET_TOPIC: dataset-events
      KAFKA_GROUP_ID: data-warehouse-group
      KAFKA_AUTO_OFFSET_RESET: earliest
    depends_on:
      - mongodb
      - minio
      - kafka
    networks:
      - data-warehouse-network
    volumes:
      - ./app:/app/app:ro

volumes:
  mongodb_data:
  minio_data:

networks:
  data-warehouse-network:
    driver: bridge
